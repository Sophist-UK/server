#
# MDEV-32380 Array data type for stored routnes
#
CREATE TABLE t1 (a INT, b INT);
CREATE PROCEDURE p1()
BEGIN
DECLARE rec INT ARRAY[2] DEFAULT ARRAY[100,200];
DECLARE i1 INT ARRAY[2] DEFAULT ARRAY[1,2];
DECLARE i2 INT ARRAY[2] DEFAULT ARRAY[1,2];
INSERT INTO t1 VALUES (rec[1],rec[2]);
INSERT INTO t1 VALUES (10, rec=ARRAY[100,200]);
INSERT INTO t1 VALUES (10, ARRAY[100,200]=rec);
INSERT INTO t1 SELECT 10, 20 FROM DUAL WHERE rec=ARRAY[100,200];
INSERT INTO t1 SELECT 10, 21 FROM DUAL WHERE ARRAY[100,200]=rec;
SET rec[1]=NULL;
INSERT INTO t1 VALUES (11, rec=ARRAY[100,200]);
INSERT INTO t1 VALUES (11, rec=ARRAY[100,201]);
INSERT INTO t1 VALUES (11, ARRAY[100,200]=rec);
INSERT INTO t1 VALUES (11, ARRAY[100,201]=rec);
INSERT INTO t1 SELECT 11, 20 FROM DUAL WHERE rec=ARRAY[100,200];
INSERT INTO t1 SELECT 11, 21 FROM DUAL WHERE ARRAY[100,200]=rec;
SET rec[2]=NULL;
INSERT INTO t1 VALUES (12, rec=ARRAY[100,200]);
INSERT INTO t1 VALUES (12, ARRAY[100,200]=rec);
INSERT INTO t1 SELECT 12, 20 FROM DUAL WHERE rec=ARRAY[100,200];
INSERT INTO t1 SELECT 12, 21 FROM DUAL WHERE ARRAY[100,200]=rec;
-- Testing expressions with SP variables inside the index
-- Covers Item::unset_rewritable_query_parameter
SET rec=ARRAY[101,201];
FOR i IN 1..2 DO
INSERT INTO t1 VALUES (rec[COALESCE(i)], rec[i]);
END FOR;
SET rec=ARRAY[102,202];
FOR i IN 1..2 DO
INSERT INTO t1 VALUES (rec[i1[i2[COALESCE(i)]]], rec[i1[i2[i]]]);
END FOR;
END;
$$
CALL p1();
SELECT * FROM t1;
a	b
100	200
10	1
10	1
10	20
10	21
11	NULL
11	0
11	NULL
11	0
12	NULL
12	NULL
101	101
201	201
102	102
202	202
DROP TABLE t1;
DROP PROCEDURE p1;
include/show_binlog_events.inc
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
master-bin.000001	#	Gtid	#	#	GTID #-#-#
master-bin.000001	#	Query	#	#	use `test`; CREATE TABLE t1 (a INT, b INT)
master-bin.000001	#	Gtid	#	#	GTID #-#-#
master-bin.000001	#	Query	#	#	use `test`; CREATE DEFINER=`root`@`localhost` PROCEDURE `p1`()
BEGIN
DECLARE rec INT ARRAY[2] DEFAULT ARRAY[100,200];
DECLARE i1 INT ARRAY[2] DEFAULT ARRAY[1,2];
DECLARE i2 INT ARRAY[2] DEFAULT ARRAY[1,2];
INSERT INTO t1 VALUES (rec[1],rec[2]);
INSERT INTO t1 VALUES (10, rec=ARRAY[100,200]);
INSERT INTO t1 VALUES (10, ARRAY[100,200]=rec);
INSERT INTO t1 SELECT 10, 20 FROM DUAL WHERE rec=ARRAY[100,200];
INSERT INTO t1 SELECT 10, 21 FROM DUAL WHERE ARRAY[100,200]=rec;
SET rec[1]=NULL;
INSERT INTO t1 VALUES (11, rec=ARRAY[100,200]);
INSERT INTO t1 VALUES (11, rec=ARRAY[100,201]);
INSERT INTO t1 VALUES (11, ARRAY[100,200]=rec);
INSERT INTO t1 VALUES (11, ARRAY[100,201]=rec);
INSERT INTO t1 SELECT 11, 20 FROM DUAL WHERE rec=ARRAY[100,200];
INSERT INTO t1 SELECT 11, 21 FROM DUAL WHERE ARRAY[100,200]=rec;
SET rec[2]=NULL;
INSERT INTO t1 VALUES (12, rec=ARRAY[100,200]);
INSERT INTO t1 VALUES (12, ARRAY[100,200]=rec);
INSERT INTO t1 SELECT 12, 20 FROM DUAL WHERE rec=ARRAY[100,200];
INSERT INTO t1 SELECT 12, 21 FROM DUAL WHERE ARRAY[100,200]=rec;
-- Testing expressions with SP variables inside the index
-- Covers Item::unset_rewritable_query_parameter
SET rec=ARRAY[101,201];
FOR i IN 1..2 DO
INSERT INTO t1 VALUES (rec[COALESCE(i)], rec[i]);
END FOR;
SET rec=ARRAY[102,202];
FOR i IN 1..2 DO
INSERT INTO t1 VALUES (rec[i1[i2[COALESCE(i)]]], rec[i1[i2[i]]]);
END FOR;
END
master-bin.000001	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000001	#	Query	#	#	use `test`; INSERT INTO t1 VALUES ( NAME_CONST('rec[0]',100), NAME_CONST('rec[1]',200))
master-bin.000001	#	Query	#	#	COMMIT
master-bin.000001	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000001	#	Query	#	#	use `test`; INSERT INTO t1 VALUES (10,  NAME_CONST('rec',ARRAY[100,200])=ARRAY[100,200])
master-bin.000001	#	Query	#	#	COMMIT
master-bin.000001	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000001	#	Query	#	#	use `test`; INSERT INTO t1 VALUES (10, ARRAY[100,200]= NAME_CONST('rec',ARRAY[100,200]))
master-bin.000001	#	Query	#	#	COMMIT
master-bin.000001	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000001	#	Query	#	#	use `test`; INSERT INTO t1 SELECT 10, 20 FROM DUAL WHERE  NAME_CONST('rec',ARRAY[100,200])=ARRAY[100,200]
master-bin.000001	#	Query	#	#	COMMIT
master-bin.000001	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000001	#	Query	#	#	use `test`; INSERT INTO t1 SELECT 10, 21 FROM DUAL WHERE ARRAY[100,200]= NAME_CONST('rec',ARRAY[100,200])
master-bin.000001	#	Query	#	#	COMMIT
master-bin.000001	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000001	#	Query	#	#	use `test`; INSERT INTO t1 VALUES (11,  NAME_CONST('rec',ARRAY[NULL,200])=ARRAY[100,200])
master-bin.000001	#	Query	#	#	COMMIT
master-bin.000001	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000001	#	Query	#	#	use `test`; INSERT INTO t1 VALUES (11,  NAME_CONST('rec',ARRAY[NULL,200])=ARRAY[100,201])
master-bin.000001	#	Query	#	#	COMMIT
master-bin.000001	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000001	#	Query	#	#	use `test`; INSERT INTO t1 VALUES (11, ARRAY[100,200]= NAME_CONST('rec',ARRAY[NULL,200]))
master-bin.000001	#	Query	#	#	COMMIT
master-bin.000001	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000001	#	Query	#	#	use `test`; INSERT INTO t1 VALUES (11, ARRAY[100,201]= NAME_CONST('rec',ARRAY[NULL,200]))
master-bin.000001	#	Query	#	#	COMMIT
master-bin.000001	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000001	#	Query	#	#	use `test`; INSERT INTO t1 SELECT 11, 20 FROM DUAL WHERE  NAME_CONST('rec',ARRAY[NULL,200])=ARRAY[100,200]
master-bin.000001	#	Query	#	#	COMMIT
master-bin.000001	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000001	#	Query	#	#	use `test`; INSERT INTO t1 SELECT 11, 21 FROM DUAL WHERE ARRAY[100,200]= NAME_CONST('rec',ARRAY[NULL,200])
master-bin.000001	#	Query	#	#	COMMIT
master-bin.000001	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000001	#	Query	#	#	use `test`; INSERT INTO t1 VALUES (12,  NAME_CONST('rec',ARRAY[NULL,NULL])=ARRAY[100,200])
master-bin.000001	#	Query	#	#	COMMIT
master-bin.000001	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000001	#	Query	#	#	use `test`; INSERT INTO t1 VALUES (12, ARRAY[100,200]= NAME_CONST('rec',ARRAY[NULL,NULL]))
master-bin.000001	#	Query	#	#	COMMIT
master-bin.000001	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000001	#	Query	#	#	use `test`; INSERT INTO t1 SELECT 12, 20 FROM DUAL WHERE  NAME_CONST('rec',ARRAY[NULL,NULL])=ARRAY[100,200]
master-bin.000001	#	Query	#	#	COMMIT
master-bin.000001	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000001	#	Query	#	#	use `test`; INSERT INTO t1 SELECT 12, 21 FROM DUAL WHERE ARRAY[100,200]= NAME_CONST('rec',ARRAY[NULL,NULL])
master-bin.000001	#	Query	#	#	COMMIT
master-bin.000001	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000001	#	Query	#	#	use `test`; INSERT INTO t1 VALUES ( NAME_CONST('rec[coalesce(i)]',101),  NAME_CONST('rec[i]',101))
master-bin.000001	#	Query	#	#	COMMIT
master-bin.000001	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000001	#	Query	#	#	use `test`; INSERT INTO t1 VALUES ( NAME_CONST('rec[coalesce(i)]',201),  NAME_CONST('rec[i]',201))
master-bin.000001	#	Query	#	#	COMMIT
master-bin.000001	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000001	#	Query	#	#	use `test`; INSERT INTO t1 VALUES ( NAME_CONST('rec[i1[i2[coalesce(i)]]]',102),  NAME_CONST('rec[i1[i2[i]]]',102))
master-bin.000001	#	Query	#	#	COMMIT
master-bin.000001	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000001	#	Query	#	#	use `test`; INSERT INTO t1 VALUES ( NAME_CONST('rec[i1[i2[coalesce(i)]]]',202),  NAME_CONST('rec[i1[i2[i]]]',202))
master-bin.000001	#	Query	#	#	COMMIT
master-bin.000001	#	Gtid	#	#	GTID #-#-#
master-bin.000001	#	Query	#	#	use `test`; DROP TABLE `t1` /* generated by server */
master-bin.000001	#	Gtid	#	#	GTID #-#-#
master-bin.000001	#	Query	#	#	use `test`; DROP PROCEDURE p1
#
# Testing ARRAY elements in LIMIT
#
FLUSH LOGS;
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (10),(10);
CREATE TABLE t2 (a INT);
CREATE PROCEDURE p1()
BEGIN
DECLARE a INT DEFAULT 1;
DECLARE rec INT ARRAY[2] DEFAULT ARRAY[10, a];
DECLARE i1 INT ARRAY[2] DEFAULT ARRAY[1,2];
DECLARE i2 INT ARRAY[2] DEFAULT ARRAY[1,2];
INSERT INTO t2 SELECT 1 FROM t1 LIMIT a;
INSERT INTO t2 SELECT 2 FROM t1 LIMIT rec[2];
INSERT INTO t2 SELECT 3 FROM t1 LIMIT rec[a];
INSERT INTO t2 SELECT 3 FROM t1 LIMIT rec[COALESCE(a)];
INSERT INTO t2 SELECT 3 FROM t1 LIMIT rec[i1[i2[COALESCE(a)]]];
END;
$$
CALL p1();
Warnings:
Note	1592	Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. The statement is unsafe because it uses a LIMIT clause. This is unsafe because the set of rows included cannot be predicted
DROP TABLE t1,t2;
DROP PROCEDURE p1;
include/show_binlog_events.inc
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
master-bin.000002	#	Binlog_checkpoint	#	#	master-bin.000002
master-bin.000002	#	Gtid	#	#	GTID #-#-#
master-bin.000002	#	Query	#	#	use `test`; CREATE TABLE t1 (a INT)
master-bin.000002	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000002	#	Query	#	#	use `test`; INSERT INTO t1 VALUES (10),(10)
master-bin.000002	#	Query	#	#	COMMIT
master-bin.000002	#	Gtid	#	#	GTID #-#-#
master-bin.000002	#	Query	#	#	use `test`; CREATE TABLE t2 (a INT)
master-bin.000002	#	Gtid	#	#	GTID #-#-#
master-bin.000002	#	Query	#	#	use `test`; CREATE DEFINER=`root`@`localhost` PROCEDURE `p1`()
BEGIN
DECLARE a INT DEFAULT 1;
DECLARE rec INT ARRAY[2] DEFAULT ARRAY[10, a];
DECLARE i1 INT ARRAY[2] DEFAULT ARRAY[1,2];
DECLARE i2 INT ARRAY[2] DEFAULT ARRAY[1,2];
INSERT INTO t2 SELECT 1 FROM t1 LIMIT a;
INSERT INTO t2 SELECT 2 FROM t1 LIMIT rec[2];
INSERT INTO t2 SELECT 3 FROM t1 LIMIT rec[a];
INSERT INTO t2 SELECT 3 FROM t1 LIMIT rec[COALESCE(a)];
INSERT INTO t2 SELECT 3 FROM t1 LIMIT rec[i1[i2[COALESCE(a)]]];
END
master-bin.000002	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000002	#	Query	#	#	use `test`; INSERT INTO t2 SELECT 1 FROM t1 LIMIT 1
master-bin.000002	#	Query	#	#	COMMIT
master-bin.000002	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000002	#	Query	#	#	use `test`; INSERT INTO t2 SELECT 2 FROM t1 LIMIT 1
master-bin.000002	#	Query	#	#	COMMIT
master-bin.000002	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000002	#	Query	#	#	use `test`; INSERT INTO t2 SELECT 3 FROM t1 LIMIT 10
master-bin.000002	#	Query	#	#	COMMIT
master-bin.000002	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000002	#	Query	#	#	use `test`; INSERT INTO t2 SELECT 3 FROM t1 LIMIT 10
master-bin.000002	#	Query	#	#	COMMIT
master-bin.000002	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000002	#	Query	#	#	use `test`; INSERT INTO t2 SELECT 3 FROM t1 LIMIT 10
master-bin.000002	#	Query	#	#	COMMIT
master-bin.000002	#	Gtid	#	#	GTID #-#-#
master-bin.000002	#	Query	#	#	use `test`; DROP TABLE `t1`,`t2` /* generated by server */
master-bin.000002	#	Gtid	#	#	GTID #-#-#
master-bin.000002	#	Query	#	#	use `test`; DROP PROCEDURE p1
#
# Stored function in an array index
#
FLUSH LOGS;
CREATE OR REPLACE TABLE t1 (a INT);
CREATE OR REPLACE FUNCTION f1(a INT) RETURNS INT RETURN a;
CREATE OR REPLACE FUNCTION f2(a INT) RETURNS INT
BEGIN
DECLARE rec INT ARRAY[2] DEFAULT ARRAY[100,200];
RETURN rec[f1(a)];
END;
$$
INSERT INTO t1 SELECT f2(1);
INSERT INTO t1 SELECT f2(2);
SELECT * FROM t1;
a
100
200
DROP FUNCTION f2;
DROP FUNCTION f1;
DROP TABLE t1;
include/show_binlog_events.inc
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
master-bin.000003	#	Binlog_checkpoint	#	#	master-bin.000003
master-bin.000003	#	Gtid	#	#	GTID #-#-#
master-bin.000003	#	Query	#	#	use `test`; CREATE OR REPLACE TABLE t1 (a INT)
master-bin.000003	#	Gtid	#	#	GTID #-#-#
master-bin.000003	#	Query	#	#	use `test`; CREATE OR REPLACE DEFINER=`root`@`localhost` FUNCTION `f1`(a INT) RETURNS int(11)
RETURN a
master-bin.000003	#	Gtid	#	#	GTID #-#-#
master-bin.000003	#	Query	#	#	use `test`; CREATE OR REPLACE DEFINER=`root`@`localhost` FUNCTION `f2`(a INT) RETURNS int(11)
BEGIN
DECLARE rec INT ARRAY[2] DEFAULT ARRAY[100,200];
RETURN rec[f1(a)];
END
master-bin.000003	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000003	#	Query	#	#	use `test`; INSERT INTO t1 SELECT f2(1)
master-bin.000003	#	Query	#	#	COMMIT
master-bin.000003	#	Gtid	#	#	BEGIN GTID #-#-#
master-bin.000003	#	Query	#	#	use `test`; INSERT INTO t1 SELECT f2(2)
master-bin.000003	#	Query	#	#	COMMIT
master-bin.000003	#	Gtid	#	#	GTID #-#-#
master-bin.000003	#	Query	#	#	use `test`; DROP FUNCTION f2
master-bin.000003	#	Gtid	#	#	GTID #-#-#
master-bin.000003	#	Query	#	#	use `test`; DROP FUNCTION f1
master-bin.000003	#	Gtid	#	#	GTID #-#-#
master-bin.000003	#	Query	#	#	use `test`; DROP TABLE `t1` /* generated by server */
#
# End of MDEV-32380 Array data type for stored routnes
#
